package com.wangjie.wheelview;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.util.TypedValue;

/**
 * @author victor
 * @Description
 * @date 2018/4/20
 */

public class PasswordEditText extends android.support.v7.widget.AppCompatEditText {

    private Paint mPaint;
    // one password char hold the place
    private int mPasswordItemWidth;
    // default password number
    private int mPasswordNumber = 8;
    // bg color
    private int mDividerColor = Color.parseColor("#808080");

    // corner size
    private int cornerSize = 15;
    private boolean showCorner;
    // divider size
    private int mDivisionLineSize = 1;
    // password color
    private int mPasswordColor = mDividerColor;
    private boolean isSquare;
    private boolean isShowPassword;

    public PasswordEditText(Context context) {
        super(context);
        init(context, null);
    }

    public PasswordEditText(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context, attrs);
    }

    public PasswordEditText(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context, attrs);
    }

    private void init(Context context, AttributeSet attrs) {
        initPaint();
        initAttributeSet(context, attrs);
        setCursorVisible(false);
    }

    /**
     * attr init
     */
    private void initAttributeSet(Context context, AttributeSet attrs) {
        if (attrs == null) {
            return;
        }
        TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.PasswordEditText);
        mDivisionLineSize = (int) array.getDimension(R.styleable.PasswordEditText_divisionLineSize, 1);
        showCorner =  array.getBoolean(R.styleable.PasswordEditText_showCorner, false);
        cornerSize = (int) array.getDimension(R.styleable.PasswordEditText_cornerSize, 15);
        mDividerColor = array.getColor(R.styleable.PasswordEditText_dividerColor, Color.parseColor("#808080"));
        mPasswordColor = array.getColor(R.styleable.PasswordEditText_passwordColor, mDividerColor);
        mPasswordNumber = array.getInt(R.styleable.PasswordEditText_passwordNumber, 8);
        isSquare = array.getBoolean(R.styleable.PasswordEditText_isSquare, false);
        isShowPassword = array.getBoolean(R.styleable.PasswordEditText_isShowPassword, true);
        array.recycle();
    }

    /**
     * init paint
     */
    private void initPaint() {
        mPaint = new Paint();
        mPaint.setAntiAlias(true);
        mPaint.setDither(true);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        mPasswordItemWidth = (getWidth() - (mPasswordNumber - 1) * mDivisionLineSize) / mPasswordNumber;
        if (isSquare) {
            drawBg(canvas);
            drawDivisionLine(canvas);
        } else {
            drawBottomLine(canvas);
        }

        drawPassword(canvas);
    }

    /**
     * draw background
     */
    private void drawBg(Canvas canvas) {
        mPaint.setColor(mDividerColor);
        
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeWidth(mDivisionLineSize);
        RectF rectF = new RectF(mDivisionLineSize, mDivisionLineSize, getWidth() - mDivisionLineSize,
                getHeight() - mDivisionLineSize);
        if (showCorner) {
            canvas.drawRoundRect(rectF, cornerSize, cornerSize, mPaint);
        } else {
            canvas.drawRect(rectF, mPaint);
        }
    }

    /**
     * draw password
     */
    private void drawPassword(Canvas canvas) {
        String password = getText().toString();
        int passwordLength = password.length();
        if (passwordLength == 0) {
            return;
        }
        mPaint.setColor(mPasswordColor);
        mPaint.setTextSize(50);

        int perWidth = getWidth() / mPasswordNumber;
        int starX = (int) ((getWidth() / mPasswordNumber - (mPaint.measureText(password) / password.length())) / 2);
        int y = (int) ((getHeight() - mPaint.getFontMetrics().bottom - mPaint.getFontMetrics().top) / 2);
        mPaint.setStyle(Paint.Style.FILL);
        for (int i = 0; i < passwordLength; i++) {
            if (!isShowPassword) {
                canvas.drawText("*", starX + perWidth * i, y, mPaint);
            } else {
                canvas.drawText(password.substring(i, i + 1), starX + perWidth * i, y, mPaint);
            }
        }
    }

    /**
     * draw divider
     */
    private void drawDivisionLine(Canvas canvas) {
        mPaint.setStrokeWidth(mDivisionLineSize);
        mPaint.setColor(mDividerColor);
        for (int i = 0; i < mPasswordNumber - 1; i++) {
            int startX = (i + 1) * mDivisionLineSize + (i + 1) * mPasswordItemWidth + mDivisionLineSize;
            canvas.drawLine(startX, mDivisionLineSize, startX, getHeight() - mDivisionLineSize, mPaint);
        }
    }

    /**
     * draw bottom line
     * @param canvas
     */
    private void drawBottomLine(Canvas canvas) {
        mPaint.setStrokeWidth(10);
        mPaint.setColor(mDividerColor);
        int padding = 20;
        int perWidth = getWidth() / mPasswordNumber - padding;
        int startX = padding / 2;
        for (int i = 0; i < mPasswordNumber; i++) {
            canvas.drawLine(startX + perWidth * i + padding * i, getHeight(), startX + perWidth * (i + 1) + padding * i, getHeight(), mPaint);
        }
    }
}
